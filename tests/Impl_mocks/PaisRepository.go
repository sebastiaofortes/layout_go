// Code generated by mockery v2.28.1. DO NOT EDIT.

package impl_mocks

import (
	domain "github.com/sebastiaofortes/layout_go/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// PaisRepository is an autogenerated mock type for the PaisRepository type
type PaisRepository struct {
	mock.Mock
}

// GetPais provides a mock function with given fields: _a0
func (_m *PaisRepository) GetPais(_a0 int32) (domain.Pais, error) {
	ret := _m.Called(_a0)

	var r0 domain.Pais
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (domain.Pais, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int32) domain.Pais); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(domain.Pais)
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPaisRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaisRepository creates a new instance of PaisRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaisRepository(t mockConstructorTestingTNewPaisRepository) *PaisRepository {
	mock := &PaisRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
