// Code generated by mockery v2.28.1. DO NOT EDIT.

package impl_mocks

import mock "github.com/stretchr/testify/mock"

// EsperançaDeVida is an autogenerated mock type for the EsperançaDeVida type
type EsperançaDeVida struct {
	mock.Mock
}

// CalcularExpectativaDeVidaPorIdade provides a mock function with given fields: _a0
func (_m *EsperançaDeVida) CalcularExpectativaDeVidaPorIdade(_a0 int32) (float32, error) {
	ret := _m.Called(_a0)

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (float32, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int32) float32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalcularExpectativaDeVidaPorPais provides a mock function with given fields: _a0
func (_m *EsperançaDeVida) CalcularExpectativaDeVidaPorPais(_a0 int32) (float32, error) {
	ret := _m.Called(_a0)

	var r0 float32
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (float32, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int32) float32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(float32)
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEsperançaDeVida interface {
	mock.TestingT
	Cleanup(func())
}

// NewEsperançaDeVida creates a new instance of EsperançaDeVida. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEsperançaDeVida(t mockConstructorTestingTNewEsperançaDeVida) *EsperançaDeVida {
	mock := &EsperançaDeVida{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
