// Code generated by mockery v2.28.1. DO NOT EDIT.

package impl_mocks

import (
	domain "github.com/sebastiaofortes/layout_go/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// PessoaRepository is an autogenerated mock type for the PessoaRepository type
type PessoaRepository struct {
	mock.Mock
}

// GetAllPessoas provides a mock function with given fields:
func (_m *PessoaRepository) GetAllPessoas() ([]domain.Pessoa, error) {
	ret := _m.Called()

	var r0 []domain.Pessoa
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Pessoa, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Pessoa); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pessoa)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPessoasPorIdade provides a mock function with given fields: _a0
func (_m *PessoaRepository) GetPessoasPorIdade(_a0 int32) ([]domain.Pessoa, error) {
	ret := _m.Called(_a0)

	var r0 []domain.Pessoa
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) ([]domain.Pessoa, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int32) []domain.Pessoa); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pessoa)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPessoasPorPais provides a mock function with given fields: _a0
func (_m *PessoaRepository) GetPessoasPorPais(_a0 int32) ([]domain.Pessoa, error) {
	ret := _m.Called(_a0)

	var r0 []domain.Pessoa
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) ([]domain.Pessoa, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int32) []domain.Pessoa); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Pessoa)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPessoaRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPessoaRepository creates a new instance of PessoaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPessoaRepository(t mockConstructorTestingTNewPessoaRepository) *PessoaRepository {
	mock := &PessoaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
